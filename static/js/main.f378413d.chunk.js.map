{"version":3,"sources":["components/Button.js","components/Quotebox.js","App.js","serviceWorker.js","index.js"],"names":["ClickButton","buttonDisplayName","clickHandler","Button","onClick","QuoteBox","selectedQuote","assignNewQuoteIndex","id","className","icon","faQuoteLeft","quote","faQuoteRight","author","target","href","faTwitter","size","App","props","state","quotes","selectedQuoteIndex","selectQuoteIndex","generateNewQuoteIndex","bind","fetch","then","data","json","setState","this","length","random","console","log","Number","isInteger","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8TAaeA,EAVK,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,kBAAmBC,EAAkB,EAAlBA,aAEvC,OACM,kBAACC,EAAA,EAAD,CAAQC,QAASF,GACVD,I,6BCmCAI,EAhCE,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,cAAeC,EAA0B,EAA1BA,oBACjC,OACE,oCACE,yBAAKC,GAAG,SACN,yBAAKA,GAAG,QACN,yBAAKC,UAAU,QAAQD,GAAG,aACxB,kBAAC,IAAD,CAAiBE,KAAQC,OAE1BL,EAAcM,MACf,yBAAKH,UAAU,QAAQD,GAAG,cAC1B,kBAAC,IAAD,CAAiBE,KAAQG,IAAcJ,UAAU,QAGnD,yBAAKD,GAAG,UAAR,KACKF,EAAcQ,SAGrB,yBAAKL,UAAU,OACb,yBAAKD,GAAG,eACN,uBAAGO,OAAS,SACVC,KAAI,gDAA2CV,EAAcM,QAC7D,kBAACT,EAAA,EAAD,CAAQM,UAAU,MAAMR,kBAAoB,IAC1C,kBAAC,IAAD,CAAiBS,KAASO,IAAYC,KAAO,UAInD,kBAAC,EAAD,CAAaT,UAAU,MAAMD,GAAI,YAAYN,aAAcK,EAAqBN,kBAAmB,iBC8B5FkB,E,kDA3Db,WAAaC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CACXC,OAAQ,GACRC,mBAAoB,MAEtB,EAAKC,iBAAmB,EAAKC,sBAAsBC,KAA3B,gBACxB,EAAKnB,oBAAsB,EAAKA,oBAAoBmB,KAAzB,gBAPT,E,gEAWC,IAAD,OAClBC,MAAM,yIACHC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MACC,SAAAN,GAAM,OAAI,EAAKS,SACb,CAACT,OAAQA,GAAS,EAAKf,0B,8CAgB7B,GAAIyB,KAAKX,MAAMC,OAAOW,OAGtB,OAAOC,iBAAO,EAAGF,KAAKX,MAAMC,OAAOW,OAAO,K,4CAK1CD,KAAKD,SAAS,CAACR,mBAAoBS,KAAKP,4B,+BAIxC,OADAU,QAAQC,IAAIJ,KAAKX,MAAME,oBAErB,yBAAKd,UAAW,uBACd,wBAAIA,UAAU,qBAAd,qBACA,yBAAKD,GAAG,aAEJwB,KAAK1B,cACH,kBAAC,EAAD,CAAUA,cAAe0B,KAAK1B,cAAeC,oBAAqByB,KAAKzB,sBACvE,S,oCA3BV,GAAKyB,KAAKX,MAAMC,OAAOW,QAAWI,OAAOC,UAAUN,KAAKX,MAAME,oBAG9D,OAAOS,KAAKX,MAAMC,OAAOU,KAAKX,MAAME,wB,GA5BtBgB,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.f378413d.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from 'react-bootstrap';\n\nconst ClickButton = ({buttonDisplayName, clickHandler}) => {\n  \n  return (\n        <Button onClick={clickHandler}>\n              {buttonDisplayName}\n        </Button>\n  )\n\n}\n\nexport default ClickButton ","import React from 'react';\nimport ClickButton from './Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\nimport { faQuoteLeft } from '@fortawesome/free-solid-svg-icons';\nimport { faQuoteRight } from '@fortawesome/free-solid-svg-icons';\nimport { Button } from 'react-bootstrap';\n\n\nconst QuoteBox = ({ selectedQuote, assignNewQuoteIndex }) => {\n  return (\n    <>\n      <div id=\"quote\">\n        <div id=\"text\">\n          <div className=\"marks\" id=\"mark-left\">\n            <FontAwesomeIcon icon = {faQuoteLeft} /> \n          </div>\n          {selectedQuote.quote}\n          <div className=\"marks\" id=\"mark-right\">\n          <FontAwesomeIcon icon = {faQuoteRight} className=\"i\"/> \n          </div>\n        </div>\n        <div id=\"author\">\n          - {selectedQuote.author}\n        </div>\n      </div>\n      <div className=\"Row\">\n        <div id=\"tweet-quote\">\n          <a target = \"_blank\" \n            href={`https://twitter.com/intent/tweet?text=${selectedQuote.quote}`}>\n            <Button className=\"btn\" buttonDisplayName = \"\">\n              <FontAwesomeIcon icon = { faTwitter } size = \"lg\" />\n            </Button>\n         </a>\n        </div>\n        <ClickButton className=\"btn\" id =\"new-quote\" clickHandler={assignNewQuoteIndex} buttonDisplayName =\"New Quote\" />\n      </div>\n    </>\n  )\n}\n\nexport default QuoteBox;","import React from 'react';\nimport './App.css';\nimport { random } from 'lodash';\nimport QuoteBox from './components/Quotebox'; \nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      quotes: [],\n      selectedQuoteIndex: null \n    }\n    this.selectQuoteIndex = this.generateNewQuoteIndex.bind(this);\n    this.assignNewQuoteIndex = this.assignNewQuoteIndex.bind(this);\n  } \n\n  // fetch json file containing readymade list of quotes   \n  componentDidMount() {\n    fetch('https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json')\n      .then(data => data.json())\n      .then(\n        quotes => this.setState(\n          {quotes: quotes}, this.assignNewQuoteIndex\n        )\n      )\n  }\n\n  // gets the quote from array this.state.quotes\n  // \"selectedQuote can then be accessed and used as a variable\"\n  get selectedQuote() {\n    if (!this.state.quotes.length || !Number.isInteger(this.state.selectedQuoteIndex)){\n      return undefined;\n    } \n    return this.state.quotes[this.state.selectedQuoteIndex];\n  }\n\n  // Returns an integer in this.state.quote, if empty returns undefined \n  generateNewQuoteIndex() {\n    if(!this.state.quotes.length){\n      return undefined;\n    }\n    return random(0, this.state.quotes.length-1);\n  }\n\n  // sets state of selectedQuoteIndex to new generated integer\n  assignNewQuoteIndex(){\n    this.setState({selectedQuoteIndex: this.generateNewQuoteIndex()})\n  }\n  render() {\n    console.log(this.state.selectedQuoteIndex);\n    return (\n      <div className =\"App container-fluid\">\n        <h1 className=\"text-align-center\">Random Quotes App</h1>\n        <div id=\"quote-box\">\n          { \n            this.selectedQuote ? \n              <QuoteBox selectedQuote={this.selectedQuote} assignNewQuoteIndex={this.assignNewQuoteIndex}/> \n            : null\n          }\n        </div>\n      </div>\n    )\n  }\n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}